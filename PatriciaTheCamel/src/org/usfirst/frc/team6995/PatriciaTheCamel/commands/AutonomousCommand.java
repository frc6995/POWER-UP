// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc.team6995.PatriciaTheCamel.commands;
import java.util.concurrent.Delayed;

import org.usfirst.frc.team6995.PatriciaTheCamel.Robot;
import org.usfirst.frc.team6995.PatriciaTheCamel.subsystems.Drivebase;
import org.usfirst.frc.team6995.PatriciaTheCamel.RobotMap;

import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.CommandGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.CommandGroup;

/**
 *
 */
public class AutonomousCommand extends CommandGroup {

	static int cycleDelay;
	AutonomousDelay wait;
	DriveStraightCounts move1;
	DrivePivotCounts move2;
	DriveStraightCounts move3;
	DrivePivotCounts move4;
	DriveStraightCounts move5;
	DrivePivotCounts move6;

    /**
     * This function parses FMS data and dashboard data and returns it as an Array
     */
    private class DataParser {
   
    	String gameData;
    	public char switchFMS;
    	public DriverStation.Alliance color;
    	public char startPos;
    	public int delay;
    	public double move1dist;
    	public double move1time;
    	public double move2dist;
    	public double move2time;
    	public double move3dist;
    	public double move3time;
    	public double move4dist;
    	public double move4time;
    	public double move5dist;
    	public double move5time;
    	public double move6dist;
    	public double move6time;
    	
       	public DataParser() {
			gameData = DriverStation.getInstance().getGameSpecificMessage();
			color = DriverStation.getInstance().getAlliance();
			startPos = SmartDashboard.getString("DB/String 0", "L").charAt(0);
			
			switchFMS = gameData.charAt(0); 
			
			// gets a string in the form #,# for autonomous: Forward distance,timeout or TurnDeg,timeout
			
			String autoDelay = SmartDashboard.getString("DB/String 1", "0");
			String autoParamsMove1 = SmartDashboard.getString("DB/String 2", "-26076,5");
			String autoParamsMove2 = SmartDashboard.getString("DB/String 3", "0,0");
			String autoParamsMove3 = SmartDashboard.getString("DB/String 4", "0,0");
			String autoParamsMove4 = SmartDashboard.getString("DB/String 5", "0,0");
			String autoParamsMove5 = SmartDashboard.getString("DB/String 6", "0,0");
			String autoParamsMove6 = SmartDashboard.getString("DB/String 7", "0,0");
			String[] autoParamsMove1arr = autoParamsMove1.split(",");
			String[] autoParamsMove2arr = autoParamsMove2.split(",");
			String[] autoParamsMove3arr = autoParamsMove3.split(",");
			String[] autoParamsMove4arr = autoParamsMove4.split(",");
			String[] autoParamsMove5arr = autoParamsMove5.split(",");
			String[] autoParamsMove6arr = autoParamsMove6.split(",");
	    	try {
	    		delay = Integer.parseInt(autoDelay);
	    	}
	    	catch (NumberFormatException e) {
				delay = 0;
			}
			try { 
	    		move1dist = Double.parseDouble(autoParamsMove1arr[0]);
	    	}
	    	catch(NumberFormatException e) {
	    		move1dist = -26076;
	    	}
	    	try {
	    		move1time = Double.parseDouble(autoParamsMove1arr[1]);
	    	}
	    	catch(NumberFormatException e) {
	    		move1time = 5;
	    	}
	    	try { 
	    		move2dist = Double.parseDouble(autoParamsMove2arr[0]);
	    	}
	    	catch(NumberFormatException e) {
	    		move2dist = 0;
	    	}
	    	try {
	    		move2time = Double.parseDouble(autoParamsMove2arr[1]);
	    	}
	    	catch(NumberFormatException e) {
	    		move2time = 0;
	    	}
	    	try { 
	    		move3dist = Double.parseDouble(autoParamsMove3arr[0]);
	    	}
	    	catch(NumberFormatException e) {
	    		move3dist = 0;
	    	}
	    	try {
	    		move3time = Double.parseDouble(autoParamsMove3arr[1]);
	    	}
	    	catch(NumberFormatException e) {
	    		move3time = 0;
	    	}
	    	try { 
	    		move4dist = Double.parseDouble(autoParamsMove4arr[0]);
	    	}
	    	catch(NumberFormatException e) {
	    		move4dist = 0;
	    	}
	    	try {
	    		move4time = Double.parseDouble(autoParamsMove4arr[1]);
	    	}
	    	catch(NumberFormatException e) {
	    		move4time = 0;
	    	}
	    	try { 
	    		move5dist = Double.parseDouble(autoParamsMove5arr[0]);
	    	}
	    	catch(NumberFormatException e) {
	    		move5dist = 0;
	    	}
	    	try {
	    		move5time = Double.parseDouble(autoParamsMove5arr[1]);
	    	}
	    	catch(NumberFormatException e) {
	    		move5time = 0;
	    	}
	    	try { 
	    		move6dist = Double.parseDouble(autoParamsMove6arr[0]);
	    	}
	    	catch(NumberFormatException e) {
	    		move6dist = 0;
	    	}
	    	try {
	    		move6time = Double.parseDouble(autoParamsMove6arr[1]);
	    	}
	    	catch(NumberFormatException e) {
	    		move6time = 0;
	    	}
		}
	}
   
    public AutonomousCommand() {
    	super();
    	wait = new AutonomousDelay(0);
    	move1 = new DriveStraightCounts(-26076, 5); // default is ~10ft backwards
    	move2 = new DrivePivotCounts(0, 0);
    	move3 = new DriveStraightCounts(0, 0);
    	move4 = new DrivePivotCounts(0, 0);
    	move5 = new DriveStraightCounts(0, 0);
    	move6 = new DrivePivotCounts(0, 0);
    	this.addSequential(move1);
    	this.addSequential(move2);
    	this.addSequential(move3);
    	this.addSequential(move4);
    	this.addSequential(move5);
    	this.addSequential(move6);
    	this.addSequential(new WallSquare(5));
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
	    // TODO Is this still correct here?
    	DataParser dataParser = new DataParser();  // Fetches and parses parameters
        updateDriveParameters(dataParser.delay,dataParser.move1dist,dataParser.move1time,dataParser.move2dist,dataParser.move2time,dataParser.move3dist,dataParser.move3time,dataParser.move4dist,dataParser.move4time,dataParser.move5dist,dataParser.move5time,dataParser.move6dist,dataParser.move6time);
        if (dataParser.startPos ==  dataParser.switchFMS) {
    		this.addSequential(new ConveyorOut());
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	
    	
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    }
    
    public void updateDriveParameters(
    		int delay,
    		double move1distance, double move1time,
    		double move2distance, double move2time,
    		double move3distance, double move3time,
    		double move4distance, double move4time,
    		double move5distance, double move5time,
    		double move6distance, double move6time) {
    	this.wait.setDelay(delay);
    	this.move1.setDistance(move1distance);
    	this.move1.setDuration(move1time);
    	this.move2.setCounts(move2distance);
    	this.move2.setDuration(move2time);
    	this.move3.setDistance(move3distance);
    	this.move3.setDuration(move3time);
    	this.move4.setCounts(move4distance);
    	this.move4.setDuration(move4time);
    	this.move5.setDistance(move5distance);
    	this.move5.setDuration(move5time);
    	this.move6.setCounts(move6distance);
    	this.move6.setDuration(move6time);
    	
    }
}
